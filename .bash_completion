#===============================================================
#
# PERSONAL $HOME/.bashrc FILE for bash-2.05a (or later)
#
# Last modified: Tue Apr 15 20:32:34 CEST 2003
#
# This file is read (normally) by interactive shells only.
# Here is the place to define your aliases, functions and
# other interactive features like your prompt.
#
# This file was designed (originally) for Solaris but based
# on Redhat's default .bashrc file
# --> Modified for Linux.
# The majority of the code you'll find here is based on code found
# on Usenet (or internet).
# This bashrc file is a bit overcrowded - remember it is just
# just an example. Tailor it to your needs
#
#
#===============================================================

# --> Comments added by HOWTO author.
# --> And then edited again by ER :-)

# Define some colors first:
#red='\e[0;31m'
#RED='\e[1;31m'
#blue='\e[0;34m'
#BLUE='\e[1;34m'
#cyan='\e[0;36m'
#CYAN='\e[1;36m'
#NC='\e[0m'              # No Color
# --> Nice. Has the same effect as using "ansi.sys" in DOS.

#-------------------------------------------------------------
# Automatic setting of $DISPLAY (if not set already)
# This works for linux - your mileage may vary....
# The problem is that different types of terminals give
# different answers to 'who am i'......
# I have not found a 'universal' method yet
#-------------------------------------------------------------
# needed?
# function get_xserver ()
# {
#     case $TERM in
#         xterm )
#             XSERVER=$(who am i | awk '{print $NF}' | tr -d ')''(' )
#             XSERVER=${XSERVER%%:*}
#             ;;
#         aterm | rxvt)
#         # find some code that works here.....
#             XSERVER=$(who -m | awk '{print $NF}' | tr -d ')''(' )
#             XSERVER=${XSERVER%%:*}
#             ;;
#     esac  
# }
# 
# if [ -z ${DISPLAY:=""} ]; then
#     get_xserver
#     if [[ -z ${XSERVER}  || ${XSERVER} == $(hostname) || ${XSERVER} == "unix" ]]; then
#         DISPLAY=":0.0"          # Display on local host
#     else
#         DISPLAY=${XSERVER}:0.0  # Display on remote host
#     fi
# fi
# 
# export DISPLAY

#-----------------------
# Greeting, motd etc...
#-----------------------
# no echoing for cvs
# Looks best on a black background.....
# echo -e "${CYAN}BASH_VERSION=${RED}${BASH_VERSION%.*} ${CYAN}DISPLAY=${RED}$DISPLAY${NC}\n" >> ~/init.log
# date >> ~/init.log

#function _exit()        # function to run upon exit of shell
#{
#    echo -e "Exiting HOSTNAME=${RED}$HOSTNAME${NC} on DISPLAY=${RED}$DISPLAY${NC}" >> ~/init.log 
#}
#trap _exit EXIT

#===============================================================
#
# ALIASES AND FUNCTIONS
#
# Arguably, some functions defined here are quite big
# (ie 'lowercase') but my workstation has 512Meg of RAM, so .....
# If you want to make this file smaller, these functions can
# be converted into scripts.
#
# Many functions were taken (almost) straight from the bash-2.04
# examples.
#
#===============================================================

#----------------
# a few fun ones
#----------------

# function te()  # wrapper around xemacs/gnuserv
# {
#     if [ "$(gnuclient -batch -eval t 2>&-)" == "t" ]; then
#         gnuclient -q "$@";
#     else
#         ( xemacs "$@" &);
#     fi
# }
 
#=========================================================================
#
# PROGRAMMABLE COMPLETION - ONLY SINCE BASH-2.04
# Most are taken from the bash 2.05 documentation and from Ian McDonalds
# 'Bash completion' package (http://www.caliban.org/bash/index.shtml#completion)
# You will in fact need bash-2.05a for some features
#
#=========================================================================
# echo "$HOSTNAME: ~/.bash_completion" 

# fixes some completion issues: not sure what the $ is for but it is needed
# unset IFS or IFS=$' \t\n'


if [ "${BASH_VERSION%.*}" \< "2.05" ]; then
    echo "You will need to upgrade to at least version 2.05 for programmable completion"
    return
fi


#shopt -s extglob        # necessary
set +o nounset          # otherwise some completions will fail

complete -A hostname   ssh rsh rcp telnet rlogin r ftp ping disk
complete -A export     printenv
complete -A variable   export local readonly unset
complete -A enabled    builtin
complete -A alias      alias unalias type
complete -A function   function
complete -A user       su mail finger
complete -A group      chgrp

complete -A helptopic  help     # currently same as builtins
complete -A shopt      shopt
complete -A stopped -P '%' bg
complete -A job -P '%'     fg jobs disown

complete -A directory  mkdir rmdir
complete -A directory   -o default c

# Compression
complete -f -o default -X '*.+(zip|ZIP)'  zip
complete -f -o default -X '!*.+(zip|ZIP|jar|JAR)' jar unzip
complete -f -o default -X '*.+(z|Z)'      compress
complete -f -o default -X '!*.+(z|Z)'     uncompress
complete -f -o default -X '*.+(gz|GZ|tgz|TGZ)'    gzip tgz gv
complete -f -o default -X '!*.+(gz|GZ|tgz|TGZ)'   unzip untgz
complete -f -o default -X '*.+(bz2|BZ2)'  bzip2 bz2
complete -f -o default -X '!*.+(bz2|BZ2)' bunzip2 unbz2
# Postscript,pdf,dvi.....
complete -f -o default -X '!*.ps'  gv gs ghostview ps2pdf ps2ascii
complete -f -o default -X '!*.dvi' dvips dvipdf xdvi dviselect dvitype
complete -f -o default -X '!*.pdf' acroread pdf2ps
complete -f -o default -X '!*.+(pdf|ps)' gv kghostview
complete -f -o default -X '!*.texi*' makeinfo texi2dvi texi2html texi2pdf
complete -f -o default -X '!*.tex' tex latex slitex kile latex2pdf
complete -f -o default -X '!*.lyx' lyx
complete -f -o default -X '!*.+(htm*|HTM*)' lynx html2ps
# Multimedia
complete -f -o default -X '!*.+(jp*g|gif|xpm|png|bmp)' xv display feh
complete -f -o default -X '!*.+(jp*g|gif|xpm|png|bmp|xcf)' gimp
complete -f -o default -X '!*.+(mp3|MP3)' mpg123 mpg321
complete -f -o default -X '!*.+(ogg|OGG)' ogg123
complete -f -o default -X '!*.+(swf|SWF)' xine mplayer gflashplayer

#Office
#
complete -f -o default -X '!*.+(doc|DOC)' winword
complete -f -o default -X '!*.+(xls|XLS)' excel
complete -f -o default -X '!*.+(ppt|PPT)' powerpnt

complete -f -o default -X '!*.+(vmx|VMX)' vmware

complete -f -o default -X '!*.pl'  perl perl5

complete -f -o default -o filenames view

complete -f -o default -X '!*.gnu'  gnuplot
complete -f -o default -X '!*.rpm'  alien

# This is a 'universal' completion function - it works when commands have
# a so-called 'long options' mode , ie: 'ls --all' instead of 'ls -a'

_get_longopts () 
{ 
    local OPTIONS=`$1 --help | sed  -e '/--/!d' -e 's/.*--\([^[:space:].,]*\).*/--\1/'`
	compgen -W "$OPTIONS" -- $2
}

_longopts_func ()
{
    case "${2:-*}" in
        -*)     ;;
        *)      return ;;
    esac

    case "$1" in
        \~*)    eval cmd="$1" ;;
        *)      cmd="$1" ;;
    esac
    COMPREPLY=( $(_get_longopts ${1} ${2} ) )
}
complete  -o default -F _longopts_func configure bash
complete  -o default -F _longopts_func wget id info a2ps ls recode

# dnlam: see bin/src/samba.src for another way to do completion
# complete  -F _longopts_func dock.sh 


_make_targets ()
{
    local mdef makef gcmd cur prev i

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}

    # if prev argument is -f, return possible filename completions.
    # we could be a little smarter here and return matches against
    # `makefile Makefile *.mk', whatever exists
    case "$prev" in
        -*f)    COMPREPLY=( $(compgen -f $cur ) ); return 0;;
    esac

    # if we want an option, return the possible posix options
    case "$cur" in
        -)      COMPREPLY=(-e -f -i -k -n -p -q -r -S -s -t); return 0;;
    esac

    # make reads `makefile' before `Makefile'
    if [ -f makefile ]; then
        mdef=makefile
    elif [ -f Makefile ]; then
        mdef=Makefile
    else
        mdef=*.mk               # local convention
    fi

    # before we scan for targets, see if a makefile name was specified
    # with -f
    for (( i=0; i < ${#COMP_WORDS[@]}; i++ )); do
        if [[ ${COMP_WORDS[i]} == -*f ]]; then
            eval makef=${COMP_WORDS[i+1]}       # eval for tilde expansion
            break
        fi
    done

        [ -z "$makef" ] && makef=$mdef

    # if we have a partial word to complete, restrict completions to
    # matches of that word
    if [ -n "$2" ]; then gcmd='grep "^$2"' ; else gcmd=cat ; fi

    # if we don't want to use *.mk, we can take out the cat and use
    # test -f $makef and input redirection
    COMPREPLY=( $(cat $makef 2>/dev/null | awk 'BEGIN {FS=":"} /^[^.#   ][^=]*:/ {print $1}' | tr -s ' ' '\012' | sort -u | eval $gcmd ) )
}

complete -F _make_targets -X '+($*|*.[cho])' make gmake pmake


_killall ()
{
    local cur prev pscommand
    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}
    # get a list of processes (the first sed evaluation
    # takes care of swapped out processes, the second
    # takes care of getting the basename of the process)
    COMPREPLY=( $( ps -u $USER -o comm  | \
        sed -e '1,1d' -e 's#[]\[]##g' -e 's#^.*/##'| \
        awk '{if ($0 ~ /^'$cur'/) print $0}' ))

    return 0
}

complete -F _killall killall killps


# A meta-command completion function for commands like sudo(8), which need to
# first complete on a command, then complete according to that command's own
# completion definition - currently not quite foolproof (e.g. mount and umount
# don't work properly), but still quite useful - By Ian McDonald, modified by me.

_my_command()
{
    local cur func cline cspec
    
    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}

    if [ $COMP_CWORD = 1 ]; then
        COMPREPLY=( $( compgen -c $cur ) )
    elif complete -p ${COMP_WORDS[1]} &>/dev/null; then
        cspec=$( complete -p ${COMP_WORDS[1]} )
        if [ "${cspec%%-F *}" != "${cspec}" ]; then
            # complete -F <function>
            #
            # COMP_CWORD and COMP_WORDS() are not read-only,
            # so we can set them before handing off to regular
            # completion routine
        
            # set current token number to 1 less than now
            COMP_CWORD=$(( $COMP_CWORD - 1 ))
            # get function name
            func=${cspec#*-F }
            func=${func%% *}
            # get current command line minus initial command
            cline="${COMP_LINE#$1 }"
            # split current command line tokens into array
                COMP_WORDS=( $cline )
            $func $cline
        elif [ "${cspec#*-[abcdefgjkvu]}" != "" ]; then
            # complete -[abcdefgjkvu]
            #func=$( echo $cspec | sed -e 's/^.*\(-[abcdefgjkvu]\).*$/\1/' )
            func=$( echo $cspec | sed -e 's/^complete//' -e 's/[^ ]*$//' )
            COMPREPLY=( $( eval compgen $func $cur ) )
        elif [ "${cspec#*-A}" != "$cspec" ]; then
            # complete -A <type>
            func=${cspec#*-A }
        func=${func%% *}
        COMPREPLY=( $( compgen -A $func $cur ) )
        fi
    else
        COMPREPLY=( $( compgen -f $cur ) )
    fi
}


complete -o default -F _my_command nohup exec eval trace truss strace sotruss gdb
complete -o default -F _my_command command type which whi man nice


# Bash Maven2 completion
#

_m2_make_goals()
{
  plugin=$1
  mojos=$2
  for mojo in $mojos
  do
    export goals="$goals $plugin:$mojo"
  done
}

_m2_complete()
{
  local cur goals

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  goals='clean compile test install package deploy site'
  goals=$goals _m2_make_goals "versions" "display-dependency-updates display-plugin-updates resolve-ranges use-latest-releases use-latest-versions commit revert update-parent use-latest-snapshots set"
  goals=$goals _m2_make_goals "dependency" "copy-dependencies tree"
  goals=$goals _m2_make_goals "assembly" "assembly"
  goals=$goals _m2_make_goals "plexus" "app bundle-application bundle-runtime descriptor runtime service"
  cur=`echo $cur | sed 's/\\\\//g'`
  COMPREPLY=($(compgen -W "${goals}" ${cur} | sed 's/\\\\//g') )
}

complete -F _m2_complete -o filenames mvn

